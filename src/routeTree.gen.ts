/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as SprayImport } from './routes/spray'
import { Route as PathImport } from './routes/path'
import { Route as LoaderAnimationImport } from './routes/loader-animation'
import { Route as GooImport } from './routes/goo'
import { Route as GalaxyImport } from './routes/galaxy'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const SprayRoute = SprayImport.update({
  id: '/spray',
  path: '/spray',
  getParentRoute: () => rootRoute,
} as any)

const PathRoute = PathImport.update({
  id: '/path',
  path: '/path',
  getParentRoute: () => rootRoute,
} as any)

const LoaderAnimationRoute = LoaderAnimationImport.update({
  id: '/loader-animation',
  path: '/loader-animation',
  getParentRoute: () => rootRoute,
} as any)

const GooRoute = GooImport.update({
  id: '/goo',
  path: '/goo',
  getParentRoute: () => rootRoute,
} as any)

const GalaxyRoute = GalaxyImport.update({
  id: '/galaxy',
  path: '/galaxy',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/galaxy': {
      id: '/galaxy'
      path: '/galaxy'
      fullPath: '/galaxy'
      preLoaderRoute: typeof GalaxyImport
      parentRoute: typeof rootRoute
    }
    '/goo': {
      id: '/goo'
      path: '/goo'
      fullPath: '/goo'
      preLoaderRoute: typeof GooImport
      parentRoute: typeof rootRoute
    }
    '/loader-animation': {
      id: '/loader-animation'
      path: '/loader-animation'
      fullPath: '/loader-animation'
      preLoaderRoute: typeof LoaderAnimationImport
      parentRoute: typeof rootRoute
    }
    '/path': {
      id: '/path'
      path: '/path'
      fullPath: '/path'
      preLoaderRoute: typeof PathImport
      parentRoute: typeof rootRoute
    }
    '/spray': {
      id: '/spray'
      path: '/spray'
      fullPath: '/spray'
      preLoaderRoute: typeof SprayImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/galaxy': typeof GalaxyRoute
  '/goo': typeof GooRoute
  '/loader-animation': typeof LoaderAnimationRoute
  '/path': typeof PathRoute
  '/spray': typeof SprayRoute
  '/test': typeof TestRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/galaxy': typeof GalaxyRoute
  '/goo': typeof GooRoute
  '/loader-animation': typeof LoaderAnimationRoute
  '/path': typeof PathRoute
  '/spray': typeof SprayRoute
  '/test': typeof TestRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/galaxy': typeof GalaxyRoute
  '/goo': typeof GooRoute
  '/loader-animation': typeof LoaderAnimationRoute
  '/path': typeof PathRoute
  '/spray': typeof SprayRoute
  '/test': typeof TestRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/galaxy'
    | '/goo'
    | '/loader-animation'
    | '/path'
    | '/spray'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/galaxy'
    | '/goo'
    | '/loader-animation'
    | '/path'
    | '/spray'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/galaxy'
    | '/goo'
    | '/loader-animation'
    | '/path'
    | '/spray'
    | '/test'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GalaxyRoute: typeof GalaxyRoute
  GooRoute: typeof GooRoute
  LoaderAnimationRoute: typeof LoaderAnimationRoute
  PathRoute: typeof PathRoute
  SprayRoute: typeof SprayRoute
  TestRoute: typeof TestRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GalaxyRoute: GalaxyRoute,
  GooRoute: GooRoute,
  LoaderAnimationRoute: LoaderAnimationRoute,
  PathRoute: PathRoute,
  SprayRoute: SprayRoute,
  TestRoute: TestRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/galaxy",
        "/goo",
        "/loader-animation",
        "/path",
        "/spray",
        "/test"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/galaxy": {
      "filePath": "galaxy.tsx"
    },
    "/goo": {
      "filePath": "goo.tsx"
    },
    "/loader-animation": {
      "filePath": "loader-animation.tsx"
    },
    "/path": {
      "filePath": "path.tsx"
    },
    "/spray": {
      "filePath": "spray.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
